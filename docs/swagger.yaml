definitions:
  auth.CreateUserRequest:
    properties:
      account:
        type: string
      account_password:
        type: string
      avatar:
        type: string
      nickname:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      account:
        type: string
      account_password:
        type: string
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
    type: object
  collection.CreateCollectionRequest:
    properties:
      idea_id:
        type: integer
    type: object
  collection.DeleteCollectionRequest:
    properties:
      idea_id:
        type: integer
    type: object
  collection.IdeaResponse:
    properties:
      count:
        type: integer
      list:
        items:
          $ref: '#/definitions/model.IdeaListItem'
        type: array
    type: object
  errno.Errno:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  idea.CommentResponse:
    properties:
      count:
        type: integer
      list:
        items:
          $ref: '#/definitions/model.CommentListItem'
        type: array
    type: object
  idea.CreateCommentRequest:
    properties:
      commented_id:
        type: integer
      content:
        type: string
    type: object
  idea.CreateIdeaRequest:
    properties:
      content:
        type: string
    type: object
  idea.IdeaResponse:
    properties:
      count:
        type: integer
      list:
        items:
          $ref: '#/definitions/model.IdeaListItem'
        type: array
    type: object
  message.GetMessageForCommentResponse:
    properties:
      count:
        type: integer
      list:
        items:
          $ref: '#/definitions/model.MessageForCommentItem'
        type: array
    type: object
  message.GetMessageForLikeResponse:
    properties:
      count:
        type: integer
      list:
        items:
          $ref: '#/definitions/model.MessageForLikeItem'
        type: array
    type: object
  message.GetMessageTipResponse:
    properties:
      is_message:
        type: boolean
    type: object
  model.CommentListItem:
    properties:
      avatar:
        type: string
      commenter_id:
        type: integer
      content:
        type: string
      id:
        type: integer
      idea_id:
        type: integer
      liked:
        description: 是否点赞
        type: boolean
      likes_sum:
        type: integer
      nickname:
        type: string
      release_date:
        type: string
    type: object
  model.History:
    properties:
      name:
        type: string
      user_id:
        type: string
    type: object
  model.IdeaListItem:
    properties:
      avatar:
        type: string
      comment_sum:
        type: integer
      content:
        type: string
      idea_id:
        type: integer
      liked:
        description: 是否点赞
        type: boolean
      likes_sum:
        type: integer
      nickname:
        type: string
      publisher_id:
        type: integer
      release_date:
        type: string
    type: object
  model.MessageForCommentItem:
    properties:
      avatar:
        type: string
      content:
        type: string
      date:
        type: string
      idea_id:
        type: integer
      nickname:
        type: string
      reply:
        type: string
      user_id:
        type: integer
    required:
    - avatar
    - content
    - idea_id
    - nickname
    - reply
    - user_id
    type: object
  model.MessageForLikeItem:
    properties:
      avatar:
        type: string
      comment_id:
        type: integer
      content:
        type: string
      date:
        type: string
      idea_id:
        type: integer
      nickname:
        type: string
      user_id:
        type: integer
    required:
    - avatar
    - comment_id
    - content
    - idea_id
    - nickname
    - user_id
    type: object
  report.CreateReportRequest:
    properties:
      comment_id:
        type: integer
      idea_id:
        type: integer
      json:
        type: string
      kind:
        type: integer
      user_id:
        type: integer
    type: object
  search.IdeaResponse:
    properties:
      count:
        type: integer
      list:
        items:
          $ref: '#/definitions/model.IdeaListItem'
        type: array
    type: object
  search.UserInfo:
    properties:
      avatar:
        type: string
      energy:
        type: integer
      id:
        type: integer
      nickname:
        type: string
    type: object
  search.UserListResponse:
    properties:
      count:
        type: integer
      list:
        items:
          $ref: '#/definitions/search.UserInfo'
        type: array
    type: object
  user.GetUserInfoResponse:
    properties:
      avatar:
        type: string
      energy:
        type: integer
      id:
        type: integer
      nickname:
        type: string
    type: object
  user.UpdateUserInfoRequest:
    properties:
      avatar:
        type: string
      nickname:
        type: string
    type: object
host: 124.71.184.107
info:
  contact:
    email: 2036479155@qq.com
    name: gongna
  description: 零重力APP
  termsOfService: http://swagger.io/terrms
  title: ZeroGravity
  version: 1.0.0
paths:
  /api/v1/auth/api/v1/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: 'The user enters the account and password and then logs in '
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: The user enters the account and password and then logs in
      tags:
      - auth
  /api/v1/auth/api/v1/register:
    post:
      consumes:
      - application/json
      description: User register
      parameters:
      - description: 'The user enters the account and password and then register in '
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/auth.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: User enters account and password to register
      tags:
      - auth
  /api/v1/collection:
    delete:
      consumes:
      - application/json
      description: Delete favorite records from the database
      parameters:
      - description: userid
        in: header
        name: token
        required: true
        type: string
      - description: 'Delete favorite records from the database  '
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/collection.DeleteCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Delete favorites
      tags:
      - collection
    get:
      consumes:
      - application/json
      description: Get a user's favorite record table and return it to the front end
      parameters:
      - description: id
        in: header
        name: token
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/collection.IdeaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get a user's favorite record table
      tags:
      - collection
    post:
      consumes:
      - application/json
      description: Add a new favorite record to the database
      parameters:
      - description: userid
        in: header
        name: token
        required: true
        type: string
      - description: 'Add a new favorite record to the database '
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/collection.CreateCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Add favorite record
      tags:
      - collection
  /api/v1/idea:
    post:
      consumes:
      - application/json
      description: Add a thought record to the database
      parameters:
      - description: userid
        in: header
        name: token
        required: true
        type: string
      - description: Add a thought record to the database
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/idea.CreateIdeaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Add ideas
      tags:
      - idea
  /api/v1/idea/comment/:id/like:
    put:
      consumes:
      - application/json
      description: Add a comment and like record to the database
      parameters:
      - description: LikersId
        in: header
        name: token
        required: true
        type: string
      - description: CommentId
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Add comment and like record
      tags:
      - idea
  /api/v1/idea/detail/:id:
    delete:
      consumes:
      - application/json
      description: Add a thought record to the database
      parameters:
      - description: Add a thought record to the database
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/idea.CreateIdeaRequest'
      - description: userid
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Add ideas
      tags:
      - idea
    get:
      consumes:
      - application/json
      description: Return to the idea form obtained by the front end
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: uid
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/model.IdeaListItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get ideas
      tags:
      - idea
  /api/v1/idea/detail/:id/comment:
    get:
      consumes:
      - application/json
      description: Return to the comment form obtained by the front end
      parameters:
      - description: uid
        in: header
        name: token
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/idea.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get comments
      tags:
      - idea
  /api/v1/idea/detail/:id/comment/:comment_id:
    delete:
      consumes:
      - application/json
      description: Delete the comment record from the database
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: uid
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Delete comment
      tags:
      - idea
  /api/v1/idea/detail/:id/comment/:idea_id:
    post:
      consumes:
      - application/json
      description: Add comment records to the database
      parameters:
      - description: userid
        in: header
        name: token
        required: true
        type: string
      - description: Add comment records to the database
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/idea.CreateCommentRequest'
      - description: IdeaId
        in: path
        name: idea_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Add comment
      tags:
      - idea
  /api/v1/idea/detail/:id/like:
    put:
      consumes:
      - application/json
      description: Add an idea and like record to the database
      parameters:
      - description: 'LikersId '
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Add thoughts like record
      tags:
      - idea
  /api/v1/idea/liked:
    get:
      consumes:
      - application/json
      description: Return to the list of ideas that the front-end user likes
      parameters:
      - description: UserId
        in: header
        name: token
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/idea.IdeaResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get a list of ideas liked by users
      tags:
      - idea
  /api/v1/idea/list:
    get:
      consumes:
      - application/json
      description: Return a list of ideas to front-end users
      parameters:
      - description: uid
        in: header
        name: token
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: userId
        in: query
        name: userId
        required: true
        type: integer
      - description: privicy
        in: query
        name: privicy
        required: true
        type: integer
      - description: index
        in: query
        name: index
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/idea.IdeaResponse'
      summary: Get a list of ideas
      tags:
      - idea
  /api/v1/message/comment:
    get:
      consumes:
      - application/json
      description: Information returned to front-end user reviews
      parameters:
      - description: Information returned to front-end user information
        in: header
        name: token
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/message.GetMessageForCommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get user comment information
      tags:
      - message
  /api/v1/message/like:
    get:
      consumes:
      - application/json
      description: Like information returned to front-end users
      parameters:
      - description: Like information returned to front-end users
        in: header
        name: token
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      - description: page
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/message.GetMessageForLikeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get users' likes
      tags:
      - message
  /api/v1/message/readall:
    put:
      consumes:
      - application/json
      description: Change the status of the messages that the user has viewed to read
      parameters:
      - description: Change the status of the messages that the user has viewed to read
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Modify the information as read
      tags:
      - message
  /api/v1/message/tip:
    get:
      consumes:
      - application/json
      description: Return to the front-end message prompt
      parameters:
      - description: Return to the front-end message prompt
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/message.GetMessageTipResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get message reminder
      tags:
      - message
  /api/v1/report:
    post:
      consumes:
      - application/json
      description: Initiate a request to report a user
      parameters:
      - description: Initiate a request to report a user
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/report.CreateReportRequest'
      - description: userId
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: New report request
      tags:
      - report
  /api/v1/search:
    delete:
      consumes:
      - application/json
      description: Delete the history
      parameters:
      - description: userId
        in: path
        name: id
        required: true
        type: integer
      - description: ' delete history'
        in: body
        name: h
        required: true
        schema:
          $ref: '#/definitions/model.History'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Delete History
      tags:
      - search
    get:
      consumes:
      - application/json
      description: Get search results, the result is a list of users or a list of ideas
      parameters:
      - description: ' search by page'
        in: query
        name: page
        required: true
        type: integer
      - description: ' search by limit'
        in: query
        name: limit
        required: true
        type: integer
      - description: ' search by target'
        in: query
        name: target
        required: true
        type: integer
      - description: idea key word
        in: query
        name: keyword
        required: true
        type: string
      - description: userId
        in: path
        name: id
        required: true
        type: integer
      - description: Get token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/search.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get search results
      tags:
      - search
  /api/v1/search/histories:
    get:
      consumes:
      - application/json
      description: Delete the history
      parameters:
      - description: userId
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            items:
              $ref: '#/definitions/model.History'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errno.Errno'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errno.Errno'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errno.Errno'
      summary: Get Histories
      tags:
      - search
  /api/v1/user:
    put:
      consumes:
      - application/json
      description: Update user information in the database
      parameters:
      - description: UserId
        in: header
        name: token
        required: true
        type: string
      - description: Update user information in the database
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
      summary: Change user information
      tags:
      - user
  /api/v1/user/detail/:id:
    get:
      consumes:
      - application/json
      description: All information returned to a user on the front end
      parameters:
      - description: userId
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/user.GetUserInfoResponse'
      summary: Get information about a certain user
      tags:
      - user
schemes:
- http
swagger: "2.0"
